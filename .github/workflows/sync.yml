name: Sync packages into feed
on:
  schedule:
    - cron: '0 3 * * *'   # 每天UTC 03:00，可改
  workflow_dispatch:       # 手动触发
permissions:
  contents: write
concurrency:
  group: sync-feed
  cancel-in-progress: true
jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          # 让 GITHUB_TOKEN 保持在 git 凭据里，后续 git push 可用
          persist-credentials: true
      - name: Ensure jq is available
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

      - name: Sync from manifest
        env:
          MANIFEST: feedsync.json
          GITHUB_REF_NAME: ${{ github.ref_name }}
        run: |
          set -euo pipefail

          get_or_default() {
            local query="$1" default="$2"
            local v
            v=$(jq -r "$query // empty" "$MANIFEST")
            if [ -z "$v" ] || [ "$v" = "null" ]; then echo "$default"; else echo "$v"; fi
          }

          count=$(jq '.packages | length' "$MANIFEST")
          echo "Total packages: $count"

          for i in $(seq 0 $((count-1))); do
            name=$(jq -r ".packages[$i].name" "$MANIFEST")
            repo=$(jq -r ".packages[$i].repo" "$MANIFEST")
            branch=$(get_or_default ".packages[$i].branch" "main")
            src=$(get_or_default ".packages[$i].src" ".")
            dest=$(get_or_default ".packages[$i].dest" "$name")

            echo "==> Sync $name from $repo@$branch:$src -> $dest"

            # 克隆（浅克隆整个仓库，避免 sparse-checkout 丢目录）
            tmp=$(mktemp -d)
            if ! git clone --depth=1 -b "$branch" "$repo" "$tmp"; then
              echo "Fallback to default branch"
              git clone --depth=1 "$repo" "$tmp"
            fi
            
            # 路径校验
            if [ ! -d "$tmp/$src" ]; then
              echo "ERROR: upstream path not found: $src"
              find "$tmp" -maxdepth 2 -type d
              exit 1
            fi
            
            # 调试输出：源目录实际包含内容
            echo "Source listing ($repo@$branch:$src):"
            find "$tmp/$src" -maxdepth 2 -print
            
            # 复制到目标目录（先别用 --delete，确认无误再加回）
            mkdir -p "$dest"
            rsync -av \
              --exclude ".git" \
              --exclude ".github" \
              --exclude ".gitmodules" \
              "$tmp/$src/" "$dest/"
            
            # 调试输出：目标目录内容
            echo "Dest listing after copy ($dest):"
            find "$dest" -maxdepth 2 -print
            
            rm -rf "$tmp"
          done
      - name: Commit and push
        env:
          MANIFEST: feedsync.json
        run: |
          # 配置提交身份
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # 先把变更全部加入暂存区（包含新文件/删除）
          git add -A
          jq -r '.packages[] | (.dest // .name)' "$MANIFEST" | sort -u | xargs -I{} git add -f -- {}
          if git diff --cached --quiet; then
            echo "No changes."
          else
            git commit -m "chore(feed): sync upstream packages [skip ci]"
            git push origin "HEAD:${{ github.ref_name }}"
          fi
